name: Terraform Plan Preview
description: "Runs terraform plan when a PR is created"

inputs:
  PR_COMMENT_TOKEN:
    required: true
  
  TF_API_TOKEN:
    required: true

  TF_BASE_DIRECTORY:
    default: "infrastructure"
    
  TF_BASE_SUBDIRECTORY:
    required: true

  TF_CLOUD_ORGANIZATION:
    required: true

  TF_WORKSPACE:
      required: true

runs:
    using: "composite"
    steps:
      - name: Set global ENV vars
        shell: bash
        run: |
          echo "TF_API_TOKEN=${{ inputs.TF_API_TOKEN }}" >> $GITHUB_ENV
          echo "TF_CLOUD_ORGANIZATION=${{ inputs.TF_CLOUD_ORGANIZATION }}" >> $GITHUB_ENV
          
      - name: Set tag_id for PRs
        shell: bash
        run: | 
          echo "TF_VAR_tag_id=\"pr-preview\"" >> $GITHUB_ENV
          echo "Set TF_VAR_tag_id to pr-preview for PR run"

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: plan-upload
        with:
          workspace: ${{ inputs.TF_WORKSPACE }}
          directory: ${{ inputs.TF_BASE_DIRECTORY }}/${{ inputs.TF_BASE_SUBDIRECTORY }}
          speculative: true

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: plan-run
        env:
          TF_API_TOKEN: ${{ inputs.TF_API_TOKEN }}
        with:
          organization: ${{ inputs.TF_CLOUD_ORGANIZATION }}
          workspace: ${{ inputs.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      - name: Update PR
        uses: actions/github-script@v6
        id: plan-comment
        with:
          github-token: ${{ inputs.PR_COMMENT_TOKEN }}
          script: |
            const prParams = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            };

            const { data: comments } = await github.rest.issues.listComments(prParams);
            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('Terraform Plan Output')
            );

            const output = `#### Terraform Plan Output
              \`\`\`
              Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
              \`\`\`
              [Terraform Plan](${{ steps.plan-run.outputs.run_link }})`;

            if (botComment) {
               github.rest.issues.deleteComment({
                ...prParams,
                comment_id: botComment.id,
              });
            }

            github.rest.issues.createComment({
              ...prParams,
              body: output
            });